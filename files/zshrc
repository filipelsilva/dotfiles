# Fzf {{{

# Ubuntu uses fdfind, all other use fd. Standardization.
if (( ${+commands[fdfind]} )); then
    alias fd=fdfind
fi

# Make fzf not collide with zsh
export FZF_COMPLETION_TRIGGER='++'

export FZF_DEFAULT_OPTS=" \
--color fg:#ebdbb2,bg:#282828,hl:#fabd2f,fg+:#ebdbb2,bg+:#3c3836,hl+:#fabd2f \
--color info:#83a598,prompt:#bdae93,spinner:#fabd2f,pointer:#83a598,marker:#fe8019,header:#665c54 \
--layout=reverse-list \
--info=inline \
--height=80% \
--multi \
--preview '([[ -f {} ]] && (bat --style=numbers --color=always {} || cat {})) || ([[ -d {} ]] && (tree -C {} | less)) || echo {} 2> /dev/null | head -200' \
--bind '?:toggle-preview' \
"

# Fzf using fd instead of find
local FD_DEFAULT_OPTS="--follow"
if (( ${+commands[fdfind]} )); then
    local FD_NAME="fdfind"
elif (( ${+commands[fd]} )); then
    local FD_NAME="fd"
fi
export FZF_DEFAULT_COMMAND="$FD_NAME $FD_DEFAULT_OPTS"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d"

_fzf_compgen_path() {
    fd . "$1"
}

_fzf_compgen_dir() {
    fd --type d . "$1"
}

# }}}

# Aliases {{{

# Temporary
alias links="bat $HOME/OneDrive/tecnico/2º\ Ano/2º\ Semestre/Calendários/links.txt"

# Deemix
alias deemix="python3 $HOME/Programs/deemix-pyweb/server.py"

# Tor Browser
alias tor-browser="(cd $HOME/Programs/tor-browser_en-US && ./start-tor-browser.desktop)"

# Open folders/files as if you were in the file manager
alias open="xdg-open"

# Zsh configuration and reload
alias zshsource="source ~/.zshrc && echo 'sourced zshrc'"
alias zshconfig="nvim ~/.zshrc && zshsource"

# Basic commands
alias ..="cd .."
alias -- -='cd -'
alias cp="cp -r"
alias mkdir="mkdir -p"
alias ip='ip --color=auto'

# Update pip packages
alias pipup="pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"

# See all processes
alias psa="ps aux | fzf ${FZF_DEFAULT_OPTS} --header='[name:process]'"

# Aliases for tmux
alias t="tmux"
alias tp="tmuxp"

# Nvim to vim transition
alias v="nvim"

# Exa as ls
alias ls="exa"
alias l="exa -lbF --git"
alias ll="exa -lbGF --git"
alias llm="exa -lbGd --git --sort=modified"
alias la="exa -lbhHigUmuSa --time-style=long-iso --git --color-scale"
alias lx="exa -lbhHigUmuSa@ --time-style=long-iso --git --color-scale"
alias lS="exa -1"
alias lt="exa --tree --level=2"
alias lsa="ls -lha"

# Ubuntu has bat as batcat
if (( ${+commands[batcat]} )); then
    alias bat=batcat
fi

# }}}

# Functions {{{

# [F]ind-[I]n-[F]ile
function fif() {
	if [ ! "$#" -gt 0 ]; then
		echo "Need a string to search for!";
		return 1;
	fi
	rg --files-with-matches --no-messages "$1" | fzf $FZF_PREVIEW_WINDOW --header='[find in file]' --preview "rg --ignore-case --pretty --context 10 '$1' {}"
}

# [Li]nk[du]mp
function lidu() {
	lynx -dump -listonly -nonumbers $1 | grep .pdf > dump.txt
	wget -i dump.txt
	rm dump.txt
}

# [K]ill [P]rocess
function kp() {
	local pid=$(ps -ef | sed 1d | eval "fzf -m --header='[kill:process]'" | awk '{print $2}')
	if [ "x$pid" != "x" ]; then
		echo $pid | xargs kill -${1:-9}
		kp
	fi
}

# [F]ind [P]ath
function fp() {
	local loc=$(echo $PATH | sed -e $'s/:/\\\n/g' | eval "fzf --header='[find:path]'")
	if [[ -d $loc ]]; then
		echo "$(rg --files $loc | rev | cut -d"/" -f1 | rev)" | eval "fzf --header='[find:exe] => ${loc}' >/dev/null"
		fp
	fi
}

# [Up]grade
function up() {
	if (( ${+commands[apt]} )); then
		sudo apt update && sudo apt upgrade
	elif (( ${+commands[yay]} )); then
		yay -Syu --devel --timeupdate
	fi
	cargo install-update -a
	pipup
	zgen selfupdate
	zgen update
	tldr --update
	(cd ~/.fzf && git pull && ./install)
	nvim -c ":PackUpdate"
}

# Show untracked files in git repo:
+vi-git-untracked() {
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        hook_com[staged]+='?'
    fi
}

# Show relation to remote branch
+vi-git-st() {
    local ahead behind
    local -a gitstatus
    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && gitstatus+=( ">${ahead}" )
    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && gitstatus+=( "<${behind}" )
    hook_com[misc]+=${(j:/:)gitstatus}
}
# }}}

# Prompt {{{
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
zstyle ':vcs_info:git*+set-message:*' hooks git-st
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' stagedstr '+'
zstyle ':vcs_info:*' unstagedstr '*'
zstyle ':vcs_info:git:*' formats ' %F{cyan}(%s)%b%m%u%c%f'
# zstyle ':vcs_info:git:*' formats '%F{cyan}:%b%m%u%c%f'
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
PROMPT='%B%F{magenta}[%F{blue}%1~${vcs_info_msg_0_}%(?.. %F{red}%?)%F{magenta}]:%b%f '
# PROMPT='%B%F{magenta}%n@%m %F{blue}%1~${vcs_info_msg_0_} %(?..%F{red}%? )%F{magenta}$%b%f '
# }}}

# Completion menu {{{
setopt always_to_end
setopt auto_menu
setopt complete_in_word
setopt flow_control
eval "$(dircolors)"
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "$HOME/.zsh/zcompcache"
autoload -U compinit && compinit
autoload -U +X bashcompinit && bashcompinit
# }}}

# Command history {{{
HISTFILE=$HOME/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt extended_history
setopt share_history
setopt hist_find_no_dups
setopt hist_expire_dups_first
setopt hist_ignore_space
# }}}

# Vi-mode {{{
bindkey -v
KEYTIMEOUT=1
bindkey '^[[3~' delete-char
bindkey "^?" backward-delete-char
bindkey "\e." insert-last-word
# }}}

# Variables {{{
export GIT_PAGER=delta
export FORGIT_PAGER=delta
export EDITOR=nvim
export VISUAL=nvim
export PATH=$PATH:$HOME/.local/bin:$HOME/go/bin:$HOME/.cargo/bin
export BAT_THEME="gruvbox-dark"
export EXA_COLORS="lp=33:bl=38;5;220:da=38;5;240:uu=38;5;240:un=38;5;160:\
gu=38;5;240:gn=38;5;160:ur=38;5;245:uw=38;5;245:ux=38;5;245:ue=38;5;245:\
gr=38;5;240:gw=38;5;240:gx=38;5;240:tr=38;5;240:tw=38;5;240:tx=38;5;240"
FORGIT_LOG_FZF_OPTS='
--bind="ctrl-e:execute(echo {} |grep -Eo [a-f0-9]+ |head -1 |xargs git show |nvim -)"
'
# }}}

# Plugins {{{
source "${HOME}/.zgen/zgen.zsh"
if ! zgen saved; then
	zgen load wfxr/forgit
	zgen load zsh-users/zsh-autosuggestions
	zgen load zdharma/fast-syntax-highlighting
	zgen save
fi

eval "$(zoxide init zsh --cmd j)"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# }}}
