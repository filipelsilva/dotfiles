# Fzf {{{

# Make fzf not collide with zsh
export FZF_COMPLETION_TRIGGER='++'

# Default options
export FZF_DEFAULT_OPTS=" \
--layout=reverse-list \
--info=inline \
--height=10% \
--multi \
--bind '?:toggle-preview' \
"

# Fzf using fd instead of find
if (( ${+commands[fdfind]} )); then
    local FD_NAME="fdfind"
elif (( ${+commands[fd]} )); then
    local FD_NAME="fd"
fi

local FD_DEFAULT_OPTS="--hidden"
export FZF_DEFAULT_COMMAND="$FD_NAME $FD_DEFAULT_OPTS"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="$FZF_DEFAULT_COMMAND --type d"

_fzf_compgen_path() {
    fd . "$1"
}

_fzf_compgen_dir() {
    fd --type d . "$1"
}

# }}}

# Aliases {{{

# Open folders/files as if you were in the file manager
alias open="xdg-open"

# Zsh configuration and reload
alias zshsource="source $HOME/.zshrc && echo 'sourced zshrc'"
alias zshconfig="nvim $HOME/.zshrc && zshsource"

# i3 configuration and reload
alias i3source="i3-msg restart"
alias i3config="nvim $HOME/.config/i3/config && i3source"
alias i3statusconfig="nvim $HOME/.config/i3status/config && i3source"

# Basic commands
alias ..="cd .."
alias -- -="cd -"
alias cp="cp -r"
alias mkdir="mkdir -p"
alias wget="wget -c"
alias ip="ip --color=auto"
alias diff="diff --color=auto"
alias grep="grep --color=auto"
alias t=tmux
alias v=nvim

# Ls aliases
alias lt="tree -L 2"
alias ls="ls -CFN" # --color=auto"
alias lsa="ls -A"
alias l="ls -lh"
alias la="ls -lhA"
alias lx="ls -lisah"
alias lr="ls -lhR"
alias lrs="ls -R"
alias lra="ls -lhAR"

# Ssh with xterm, for targets without alacritty
alias ssh="TERM=xterm-256color ssh"

# Search for processes
alias psfzf="ps aux | fzf ${FZF_DEFAULT_OPTS} --header='[name:process]'"
alias psgrep="ps aux | grep -v grep | grep -i -e VSZ -e"

# }}}

# Functions {{{

# Start[x]: to use with optimus-manager, instead of default startx
function x() {
	if systemctl -q is-active graphical.target && [[ ! $DISPLAY && $XDG_VTNR -eq 1 ]];
	then
		sudo /usr/bin/prime-switch
		exec startx
	fi
}

# [Up]grade
function up() {
	yay -Syu --devel --timeupdate

	cd $HOME/.fzf && git fetch
	LOCAL=$(git rev-parse @)
	REMOTE=$(git rev-parse @{u})
	if [ $LOCAL != $REMOTE ]; then git pull && ./install; fi
	cd -

	zgen selfupdate && zgen update
	tldr --update
}

# [Li]nk[du]mp
function lidu() {
	lynx -dump -listonly -nonumbers $1 | grep .pdf > dump.txt
	wget -i dump.txt
	rm dump.txt
}

# [F]ind-[I]n-[F]ile
function fif() {
	if [ ! "$#" -gt 0 ]; then
		echo "Need a string to search for!";
		return 1;
	fi
	rg --files-with-matches --no-messages "$1" | fzf $FZF_PREVIEW_WINDOW --header='[find in file]' --preview "rg --ignore-case --pretty --context 10 '$1' {}"
}

# [K]ill [P]rocess
function kp() {
	local pid=$(ps -ef | sed 1d | eval "fzf -m --header='[kill:process]'" | awk '{print $2}')
	if [ "x$pid" != "x" ]; then
		echo $pid | xargs kill -${1:-9}
		kp
	fi
}
# }}}

# Prompt {{{
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' stagedstr '+'
zstyle ':vcs_info:*' unstagedstr '*'
zstyle ':vcs_info:*' formats '[%s:%b%m%u%c]'
autoload -Uz vcs_info
precmd_vcs_info() { vcs_info }
precmd_functions+=( precmd_vcs_info )
setopt prompt_subst
NEWLINE=$'\n'
PROMPT='%m%S%n%s%1~${vcs_info_msg_0_}%(?..%F{red}[%?]%f) '
#PROMPT='%m%S%n%s%1~${vcs_info_msg_0_}[%D{%H:%M:%S}]%(?..%F{red}[%?]%f) '
#PROMPT='[%n@%m %1~]${vcs_info_msg_0_}%(?..%F{red}[%?]%f)$ '
#PROMPT='[%n@%m %1~]${vcs_info_msg_0_}[%D{%H:%M:%S}]%(?..%F{red}[%?]%f)$ '
#PROMPT='┌[%~]${vcs_info_msg_0_}%(?..%F{red}[%?]%f)${NEWLINE}└[%n@%m]: '
#PROMPT='┌[%~]${vcs_info_msg_0_}[%D{%H:%M:%S}]%(?..%F{red}[%?]%f)${NEWLINE}└[%n@%m]: '
#PROMPT='%B%F{blue}%n%f%b at %B%F{green}%m%f%b in %B%F{yellow}[%~]%f%b on %B%F{magenta}${vcs_info_msg_0_}%f%b${NEWLINE}%(?..%F{red})%B%D{%H:%M:%S}%f $%b '
# }}}

# Completion menu {{{
setopt always_to_end
setopt auto_menu
setopt complete_in_word
setopt flow_control
setopt autocd
#eval "$(dircolors)"
#zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:*:*:*' menu yes select
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path "$HOME/.zsh/zcompcache"
autoload -U compinit && compinit
autoload -U +X bashcompinit && bashcompinit
# }}}

# Command history {{{
HISTFILE=$HOME/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt extended_history
setopt share_history
setopt hist_find_no_dups
setopt hist_expire_dups_first
setopt hist_ignore_space
# }}}

# Vi-mode {{{
bindkey -v
KEYTIMEOUT=1
bindkey "^[[Z" reverse-menu-complete
bindkey "^[[3~" delete-char
bindkey "^?" backward-delete-char
bindkey "\e." insert-last-word
# }}}

# Variables {{{
export MANPAGER="nvim +Man!"
export EDITOR=nvim
export VISUAL=nvim
export PATH=$PATH:$HOME/.local/bin:$HOME/go/bin:$HOME/.cargo/bin:$HOME/.local/opt/node/bin
export BAT_THEME="base16"
export BAT_STYLE="plain"
# }}}

# Plugins {{{
source "${HOME}/.zgen/zgen.zsh"
if ! zgen saved; then
	zgen load wfxr/forgit
	zgen load zsh-users/zsh-history-substring-search
	zgen save
fi

eval "$(zoxide init zsh --cmd j)"
[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh

# Zsh history substring search
export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND="none"
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
# }}}
